node框架之一 express，还有koa
简介：与内置 http模块类似，其更高效创建 web服务器

开发工具nodemon(热更新)
指令：nodemon 文件xxx

路由
介绍：客户端的操作  与  服务器端的 映射关系
例如 客户端操作 btn1  对应 服务器端的 发送  之后调用对应的处理函数

中间件
全局中间件：app.use(fuc(req,res,next){}) 
局部中间件：不使用app.use()

作用：代码预处理
多个中间件  共享一份 req res， 上游可自定义添加属性 供 下游使用

注意事项：
1. 一定在 路由定义前  定义中间件
2. 客户端发送的请求，可连续调用多个中间件操作
3. 执行完中间件代码，不要忘了 调用 next()
4. 防止代码混乱 next() 后面不写额外代码 
5. 连续多个中间件 中间件之间可共享 req res

中间件分类
1. 应用级别
  简介：app.use() 或 app.get() 或 app.post()， 既 绑定到 app 实例的中间件
2. 路由级别
  简介：绑定到 express.Router()实例的中间件
3. 错误级别(必须注册在所有路由之后)
  简介：专门 捕获异常错误，防止项目崩溃 的中间件
  app.use(fuc(err, req, res, next) {
    console.log(err.message)
    res.send('Error' + err.message)
  })
4. express内置 
  简介：自express 4.16.0版本开始，Express内置了三个常用中间件
  a. express.static 快速托管静态资源 内置中间件；例：html文件、图片、css样式等（无兼容性）
  b. express.json 解析JSON格式的请求体 （有兼容性，仅在 4.16.0+ 版本中可用）
  c. exoress.urlencoded 解析URL-encoded 格式的请求体数据（有兼容性，仅在 4.16.0+ 版本中可用）
5. 第三方 
  简介：非Express官方内置
  例如：在express@4.16.0之前版本使用的 body-parser 中间件 解析JSON格式的请求体
  步骤：npm i xxx   require导入   app.use() 注册使用

自定义中间件
  手动模拟中间件 例：express.urlencoded
  步骤： 1. 定义中间件
  2. 监听 req 的 data 事件
  3. 监听 req 的 end 事件
  4. 使用 querystring 模块解析请求体数据
  5. 将解析出来的数据对象挂在为 req.body
  6. 将自定义中间件封装为模块
